{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport API from '../API';\nexport const useMovieFetch = () => {\n  _s();\n\n  const [state, setState] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    const fetchMovie = async () => {\n      try {\n        setLoading(true);\n        setError(false);\n        console.log(movieId);\n        const movie = await API.fetchMovie(movieId);\n        const credits = await API.fetchCredits(movieId);\n        const directors = credits.crew.filter(member => member.job === 'Director');\n        setState({ ...movie,\n          actors: credits.cast,\n          directors\n        });\n        setLoading(false);\n      } catch (error) {\n        setError(true);\n      }\n    };\n\n    fetchMovie();\n  }, [movieId]);\n  return {\n    state,\n    loading,\n    error\n  };\n};\n\n_s(useMovieFetch, \"H9fMDtHieNoIS0cJiyLVriXyWm0=\");","map":{"version":3,"sources":["D:/Projects/my-app/src/hooks/useMovieFetch.js"],"names":["useState","useEffect","API","useMovieFetch","state","setState","loading","setLoading","error","setError","fetchMovie","console","log","movieId","movie","credits","fetchCredits","directors","crew","filter","member","job","actors","cast"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,GAAP,MAAgB,QAAhB;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM;AAAA;;AAC/B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,KAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMS,UAAU,GAAG,YAAY;AAC3B,UAAI;AACAH,QAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,QAAAA,QAAQ,CAAC,KAAD,CAAR;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAYC,OAAZ;AACA,cAAMC,KAAK,GAAG,MAAMZ,GAAG,CAACQ,UAAJ,CAAeG,OAAf,CAApB;AACA,cAAME,OAAO,GAAG,MAAMb,GAAG,CAACc,YAAJ,CAAiBH,OAAjB,CAAtB;AAEA,cAAMI,SAAS,GAAGF,OAAO,CAACG,IAAR,CAAaC,MAAb,CACdC,MAAM,IAAIA,MAAM,CAACC,GAAP,KAAe,UADX,CAAlB;AAGAhB,QAAAA,QAAQ,CAAC,EACL,GAAGS,KADE;AAELQ,UAAAA,MAAM,EAAEP,OAAO,CAACQ,IAFX;AAGLN,UAAAA;AAHK,SAAD,CAAR;AAKAV,QAAAA,UAAU,CAAC,KAAD,CAAV;AAEH,OAjBD,CAiBE,OAAOC,KAAP,EAAc;AACZC,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;AACJ,KArBD;;AAsBAC,IAAAA,UAAU;AACb,GAxBQ,EAwBN,CAACG,OAAD,CAxBM,CAAT;AAyBA,SAAO;AAAET,IAAAA,KAAF;AAASE,IAAAA,OAAT;AAAkBE,IAAAA;AAAlB,GAAP;AACH,CA/BM;;GAAML,a","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport API from '../API';\r\n\r\nexport const useMovieFetch = () => {\r\n    const [state, setState] = useState({});\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchMovie = async () => {\r\n            try {\r\n                setLoading(true);\r\n                setError(false);\r\n                console.log(movieId);\r\n                const movie = await API.fetchMovie(movieId);\r\n                const credits = await API.fetchCredits(movieId);\r\n\r\n                const directors = credits.crew.filter(\r\n                    member => member.job === 'Director'\r\n                );\r\n                setState({\r\n                    ...movie,\r\n                    actors: credits.cast,\r\n                    directors\r\n                })\r\n                setLoading(false);\r\n\r\n            } catch (error) {\r\n                setError(true);\r\n            }\r\n        }\r\n        fetchMovie();\r\n    }, [movieId])\r\n    return { state, loading, error };\r\n};"]},"metadata":{},"sourceType":"module"}