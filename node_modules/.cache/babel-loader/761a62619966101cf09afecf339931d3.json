{"ast":null,"code":"import { SEARCH_BASE_URL, POPULAR_BASE_URL, API_URL, API_KEY, REQUEST_TOKEN_URL, LOGIN_URL, SESSION_ID_URL } from './config';\nconst defaultConfig = {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n};\nconst apiSettings = {\n  fetchMovies: async (searchTerm, page) => {\n    const endpoint = searchTerm ? `${SEARCH_BASE_URL}${searchTerm}&page=${page}` : `${POPULAR_BASE_URL}&page=${page}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchMovie: async movieId => {\n    console.log(\"api\", movieId);\n    debugger;\n    const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchCredits: async movieId => {\n    const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n    return await (await fetch(creditsEndpoint)).json();\n  },\n  // Bonus material below for login\n  getRequestToken: async () => {\n    const reqToken = await (await fetch(REQUEST_TOKEN_URL)).json();\n    return reqToken.request_token;\n  },\n  authenticate: async (requestToken, username, password) => {\n    const bodyData = {\n      username,\n      password,\n      request_token: requestToken\n    }; // First authenticate the requestToken\n\n    const data = await (await fetch(LOGIN_URL, { ...defaultConfig,\n      body: JSON.stringify(bodyData)\n    })).json(); // Then get the sessionId with the requestToken\n\n    if (data.success) {\n      const sessionId = await (await fetch(SESSION_ID_URL, { ...defaultConfig,\n        body: JSON.stringify({\n          request_token: requestToken\n        })\n      })).json();\n      return sessionId;\n    }\n  },\n  rateMovie: async (sessionId, movieId, value) => {\n    const endpoint = `${API_URL}movie/${movieId}/rating?api_key=${API_KEY}&session_id=${sessionId}`;\n    const rating = await (await fetch(endpoint, { ...defaultConfig,\n      body: JSON.stringify({\n        value\n      })\n    })).json();\n    return rating;\n  }\n};\nexport default apiSettings;","map":{"version":3,"sources":["D:/Projects/my-app/src/API.js"],"names":["SEARCH_BASE_URL","POPULAR_BASE_URL","API_URL","API_KEY","REQUEST_TOKEN_URL","LOGIN_URL","SESSION_ID_URL","defaultConfig","method","headers","apiSettings","fetchMovies","searchTerm","page","endpoint","fetch","json","fetchMovie","movieId","console","log","fetchCredits","creditsEndpoint","getRequestToken","reqToken","request_token","authenticate","requestToken","username","password","bodyData","data","body","JSON","stringify","success","sessionId","rateMovie","value","rating"],"mappings":"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","sourcesContent":["import {\n  SEARCH_BASE_URL,\n  POPULAR_BASE_URL,\n  API_URL,\n  API_KEY,\n  REQUEST_TOKEN_URL,\n  LOGIN_URL,\n  SESSION_ID_URL\n} from './config';\n\nconst defaultConfig = {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n};\n\nconst apiSettings = {\n  fetchMovies: async (searchTerm, page) => {\n    const endpoint = searchTerm\n      ? `${SEARCH_BASE_URL}${searchTerm}&page=${page}`\n      : `${POPULAR_BASE_URL}&page=${page}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchMovie: async movieId => {\n    console.log(\"api\", movieId);\n    debugger;\n    const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchCredits: async movieId => {\n    const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n    return await (await fetch(creditsEndpoint)).json();\n  },\n  // Bonus material below for login\n  getRequestToken: async () => {\n    const reqToken = await (await fetch(REQUEST_TOKEN_URL)).json();\n    return reqToken.request_token;\n  },\n  authenticate: async (requestToken, username, password) => {\n    const bodyData = {\n      username,\n      password,\n      request_token: requestToken\n    };\n    // First authenticate the requestToken\n    const data = await (\n      await fetch(LOGIN_URL, {\n        ...defaultConfig,\n        body: JSON.stringify(bodyData)\n      })\n    ).json();\n    // Then get the sessionId with the requestToken\n    if (data.success) {\n      const sessionId = await (\n        await fetch(SESSION_ID_URL, {\n          ...defaultConfig,\n          body: JSON.stringify({ request_token: requestToken })\n        })\n      ).json();\n      return sessionId;\n    }\n  },\n  rateMovie: async (sessionId, movieId, value) => {\n    const endpoint = `${API_URL}movie/${movieId}/rating?api_key=${API_KEY}&session_id=${sessionId}`;\n\n    const rating = await (\n      await fetch(endpoint, {\n        ...defaultConfig,\n        body: JSON.stringify({ value })\n      })\n    ).json();\n\n    return rating;\n  }\n};\n\nexport default apiSettings;\n"]},"metadata":{},"sourceType":"module"}